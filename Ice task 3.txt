Ice task 3 

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  FlatList,
  Alert,
  AsyncStorage,
  Dimensions,
} from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';


const Stack = createStackNavigator();


const recyclableMaterials = [
  { id: 1, name: 'Plastic Bottle', type: 'recyclable' },
  { id: 2, name: 'Paper Bag', type: 'recyclable' },
  { id: 3, name: 'Glass Jar', type: 'recyclable' },
  { id: 4, name: 'Aluminum Can', type: 'recyclable' },
];

const contaminants = [
  { id: 5, name: 'Plastic Straw', type: 'contaminant' },
  { id: 6, name: 'Styrofoam Cup', type: 'contaminant' },
];

const gridSize = 4;
const screenWidth = Dimensions.get('window').width;

function HomeScreen({ navigation }) {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome to the Recycling Challenge!</Text>
      <Text style={styles.subtitle}>
        Test your skills by matching recyclable items while avoiding contaminants!
      </Text>
      <TouchableOpacity
        style={styles.button}
        onPress={() => navigation.navigate('Game')}
      >
        <Text style={styles.buttonText}>Start Recycling</Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.button}
        onPress={() => navigation.navigate('Leaderboard')}
      >
        <Text style={styles.buttonText}>View Leaderboard</Text>
      </TouchableOpacity>
    </View>
  );
}

function GameScreen({ navigation }) {
  const [cards, setCards] = useState([]);
  const [flippedCards, setFlippedCards] = useState([]);
  const [matchedPairs, setMatchedPairs] = useState([]);
  const [timeLeft, setTimeLeft] = useState(60);
  const [score, setScore] = useState(0);
  const [isRushMode, setIsRushMode] = useState(false);

  useEffect(() => {
    initializeGame();
    const timer = setInterval(() => {
      setTimeLeft((prev) => prev - 1);
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    if (timeLeft <= 10 && !isRushMode) {
      setIsRushMode(true);
    }
    if (timeLeft === 0) {
      endGame();
    }
  }, [timeLeft]);

  function initializeGame() {
    const allCards = [...recyclableMaterials, ...contaminants]
      .sort(() => 0.5 - Math.random())
      .slice(0, gridSize);

    const shuffledCards = [...allCards, ...allCards].sort(() => 0.5 - Math.random());
    setCards(shuffledCards.map((item, index) => ({ ...item, id: index, flipped: false })));
  }

  function flipCard(index) {
    const newCards = [...cards];
    newCards[index].flipped = true;
    setCards(newCards);

    if (flippedCards.length === 1) {
      const firstCard = flippedCards[0];
      const secondCard = newCards[index];

      if (firstCard.name === secondCard.name) {
        setMatchedPairs([...matchedPairs, firstCard.id, secondCard.id]);
        setScore((prev) => prev + 10);
      } else if (firstCard.type === 'contaminant' || secondCard.type === 'contaminant') {
        setScore((prev) => prev - 5);
        Alert.alert('Contaminant!', 'You lost points for matching a contaminant.');
      }

      setTimeout(() => {
        resetFlippedCards();
      }, 1000);
    } else {
      setFlippedCards([...flippedCards, newCards[index]]);
    }
  }

  function resetFlippedCards() {
    setFlippedCards([]);
    const newCards = cards.map((card) => ({
      ...card,
      flipped: matchedPairs.includes(card.id) ? true : false,
    }));
    setCards(newCards);
  }

  function endGame() {
    saveScore(score);
    navigation.navigate('Result', { score });
  }

  async function saveScore(newScore) {
    const leaderboard = JSON.parse(await AsyncStorage.getItem('leaderboard')) || [];
    leaderboard.push({ score: newScore, time: 60 - timeLeft });
    await AsyncStorage.setItem('leaderboard', JSON.stringify(leaderboard));
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Time Left: {timeLeft}s</Text>
      <Text style={styles.title}>Score: {score}</Text>
      <View style={styles.grid}>
        {cards.map((card, index) => (
          <TouchableOpacity
            key={index}
            style={styles.card}
            onPress={() => !card.flipped && flipCard(index)}
          >
            <Text style={styles.cardText}>{card.flipped ? card.name : '?'}</Text>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
}

function ResultScreen({ route, navigation }) {
  const { score } = route.params;

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Your Recycling Points: {score}</Text>
      <TouchableOpacity
        style={styles.button}
        onPress={() => navigation.navigate('Game')}
      >
        <Text style={styles.buttonText}>Recycle More</Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.button}
        onPress={() => navigation.navigate('Leaderboard')}
      >
        <Text style={styles.buttonText}>View Leaderboard</Text>
      </TouchableOpacity>
    </View>
  );
}

function LeaderboardScreen() {
  const [leaderboard, setLeaderboard] = useState([]);

  useEffect(() => {
    loadLeaderboard();
  }, []);

  async function loadLeaderboard() {
    const data = JSON.parse(await AsyncStorage.getItem('leaderboard')) || [];
    setLeaderboard(data);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Leaderboard</Text>
      <FlatList
        data={leaderboard.sort((a, b) => b.score - a.score)}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => (
          <View style={styles.leaderboardItem}>
            <Text style={styles.leaderboardText}>
              Score: {item.score}, Time: {item.time}s
            </Text>
          </View>
        )}
      />
      <TouchableOpacity style={styles.button} onPress={loadLeaderboard}>
        <Text style={styles.buttonText}>Refresh Leaderboard</Text>
      </TouchableOpacity>
    </View>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Game" component={GameScreen} />
        <Stack.Screen name="Result" component={ResultScreen} />
        <Stack.Screen name="Leaderboard" component={LeaderboardScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 30,
    textAlign: 'center',
  },
  button: {
    backgroundColor: '#28a745',
    padding: 15,
    marginVertical: 10,
    borderRadius: 8,
    width: '80%',
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
  },
  grid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
  },
  card: {
    width: screenWidth / 4 - 10,
    height: screenWidth / 4 - 10,
    backgroundColor: '#f1f1f1',
    margin: 5,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
  },
  cardText: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  leaderboardItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  leaderboardText: {
    fontSize: 18,
  },
});

